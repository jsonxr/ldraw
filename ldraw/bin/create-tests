#!/usr/bin/env node
const fs = require('fs/promises');
const path = require('path');

async function scan(rootFolder, name = '', filenames) {
  const filename = path.join(rootFolder, name);

  const stat = await fs.stat(filename);
  if (stat.isFile()) {
    // Ignore non ldraw files
    if (!['.dat', '.lpr', '.mpd'].includes(path.extname(filename))) {
      return;
    }

    filenames.push(name);
    return;
  }

  // It's a directory, so scan this baby and recurse
  const entries = await fs.readdir(filename, {
    encoding: 'utf8',
    withFileTypes: true,
  });
  // Files first
  const files = entries.filter((e) => e.isFile()).map((e) => e.name);
  for (const file of files) {
    await scan(rootFolder, path.join(name, file), filenames);
  }
  // Now directories
  const subfolders = entries.filter((e) => e.isDirectory()).map((e) => e.name);
  for (const subfolder of subfolders) {
    await scan(rootFolder, path.join(name, subfolder), filenames);
  }
}

const testFile = (filename) => {
  const segments = filename.split('/');
  const importPath =
    segments.slice(0, segments.length - 1).reduce((t) => t + '../', '') +
    '../__test/test-utils';
  return `import {testFile} from '${importPath}';

// Generated by bin/create-tests
it('should parse ldraw/${filename}', testFile('${filename}'));
`;
};

const main = async () => {
  const filenames = [];
  const dir = path.resolve(path.join(__dirname, '../../docs/library'));
  await scan(path.join(dir), '', filenames);

  for (const name of filenames) {
    const filename = `${path.join(__dirname, '../__ldraw', name)}.spec.ts`;
    const dirname = path.dirname(filename);
    await fs.mkdir(dirname, { recursive: true });
    console.log(name + '.spec.ts');
    await fs.writeFile(filename, testFile(name), { encoding: 'utf-8' });
  }
};

main();
